// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	kubernetes "github.com/kyma-incubator/reconciler/pkg/reconciler/kubernetes"
	kubeclient "github.com/kyma-incubator/reconciler/pkg/reconciler/kubernetes/kubeclient"
	client_gokubernetes "k8s.io/client-go/kubernetes"

	mock "github.com/stretchr/testify/mock"

	types "k8s.io/apimachinery/pkg/types"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Apply provides a mock function with given fields: u
func (_m *Client) Apply(u *unstructured.Unstructured) (*kubernetes.Resource, error) {
	ret := _m.Called(u)

	var r0 *kubernetes.Resource
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) *kubernetes.Resource); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyWithNamespaceOverride provides a mock function with given fields: u, namespaceOverride
func (_m *Client) ApplyWithNamespaceOverride(u *unstructured.Unstructured, namespaceOverride string) (*kubernetes.Resource, error) {
	ret := _m.Called(u, namespaceOverride)

	var r0 *kubernetes.Resource
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, string) *kubernetes.Resource); ok {
		r0 = rf(u, namespaceOverride)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured, string) error); ok {
		r1 = rf(u, namespaceOverride)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: namespace
func (_m *Client) DeleteNamespace(namespace string) error {
	ret := _m.Called(namespace)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteResourceByKindAndNameAndNamespace provides a mock function with given fields: kind, name, namespace, do
func (_m *Client) DeleteResourceByKindAndNameAndNamespace(kind string, name string, namespace string, do v1.DeleteOptions) (*kubernetes.Resource, error) {
	ret := _m.Called(kind, name, namespace, do)

	var r0 *kubernetes.Resource
	if rf, ok := ret.Get(0).(func(string, string, string, v1.DeleteOptions) *kubernetes.Resource); ok {
		r0 = rf(kind, name, namespace, do)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, v1.DeleteOptions) error); ok {
		r1 = rf(kind, name, namespace, do)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: kind, name, namespace
func (_m *Client) Get(kind string, name string, namespace string) (*unstructured.Unstructured, error) {
	ret := _m.Called(kind, name, namespace)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(string, string, string) *unstructured.Unstructured); ok {
		r0 = rf(kind, name, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(kind, name, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientSet provides a mock function with given fields:
func (_m *Client) GetClientSet() (*client_gokubernetes.Clientset, error) {
	ret := _m.Called()

	var r0 *client_gokubernetes.Clientset
	if rf, ok := ret.Get(0).(func() *client_gokubernetes.Clientset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client_gokubernetes.Clientset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResource provides a mock function with given fields: resource, lo
func (_m *Client) ListResource(resource string, lo v1.ListOptions) (*unstructured.UnstructuredList, error) {
	ret := _m.Called(resource, lo)

	var r0 *unstructured.UnstructuredList
	if rf, ok := ret.Get(0).(func(string, v1.ListOptions) *unstructured.UnstructuredList); ok {
		r0 = rf(resource, lo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.UnstructuredList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, v1.ListOptions) error); ok {
		r1 = rf(resource, lo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: kind, name, namespace, p
func (_m *Client) Patch(kind string, name string, namespace string, p []byte) (kubeclient.Metadata, *unstructured.Unstructured, error) {
	ret := _m.Called(kind, name, namespace, p)

	var r0 kubeclient.Metadata
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) kubeclient.Metadata); ok {
		r0 = rf(kind, name, namespace, p)
	} else {
		r0 = ret.Get(0).(kubeclient.Metadata)
	}

	var r1 *unstructured.Unstructured
	if rf, ok := ret.Get(1).(func(string, string, string, []byte) *unstructured.Unstructured); ok {
		r1 = rf(kind, name, namespace, p)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*unstructured.Unstructured)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, []byte) error); ok {
		r2 = rf(kind, name, namespace, p)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PatchUsingStrategy provides a mock function with given fields: kind, name, namespace, p, strategy
func (_m *Client) PatchUsingStrategy(kind string, name string, namespace string, p []byte, strategy types.PatchType) (kubeclient.Metadata, *unstructured.Unstructured, error) {
	ret := _m.Called(kind, name, namespace, p, strategy)

	var r0 kubeclient.Metadata
	if rf, ok := ret.Get(0).(func(string, string, string, []byte, types.PatchType) kubeclient.Metadata); ok {
		r0 = rf(kind, name, namespace, p, strategy)
	} else {
		r0 = ret.Get(0).(kubeclient.Metadata)
	}

	var r1 *unstructured.Unstructured
	if rf, ok := ret.Get(1).(func(string, string, string, []byte, types.PatchType) *unstructured.Unstructured); ok {
		r1 = rf(kind, name, namespace, p, strategy)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*unstructured.Unstructured)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string, []byte, types.PatchType) error); ok {
		r2 = rf(kind, name, namespace, p, strategy)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
